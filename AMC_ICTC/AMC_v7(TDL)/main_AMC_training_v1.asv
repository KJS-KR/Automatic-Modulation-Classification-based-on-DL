clc; close all; clear;

%% 기본 파라미터 설정
modTypes    = categorical(["QPSK", "16QAM", "64QAM", "256QAM"]);
numModTypes = length(modTypes);

spf             = 512;
snr             = -20:2:20;
numSnr          = length(snr);
numRep          = 4;
numFrame        = 100000;

tdl             = nrTDLChannel('NumReceiveAntennas', 1);

%% 신호 생성
for snrIdx = 1:numSnr
    for frameIdx = 1:numFrame
        % QPSK
        txSigQpsk = randi([0 3], spf, 1);
        modQpskSig = pskmod(txSigQpsk, 4, pi/4);
        tdlQpskSig = tdl(modQpskSig);
        awgnQpskSig = awgn(tdlQpskSig, snr(snrIdx));
        totalSigQpsk(:, :, frameIdx) = awgnQpskSig;
        
        % 16QAM
        txSig16qam = randi([0 15], spf, 1);
        mod16qamSig = qammod(txSig16qam, 16, 'UnitAveragePower', true);
        tdl16qamSig = tdl(mod16qamSig);
        awgn16qamSig = awgn(tdl16qamSig, snr(snrIdx));
        totalSig16qam(:, :, frameIdx) = awgn16qamSig;
    
        % 64QAM
        txSig64qam = randi([0 63], spf, 1);
        mod64qamSig = qammod(txSig64qam, 64, 'UnitAveragePower', true);
        tdl64qamSig = tdl(mod64qamSig);
        awgn64qamSig = awgn(tdl64qamSig, snr(snrIdx));
        totalSig64qam(:, :, frameIdx) = awgn64qamSig;
    
        
        % 256QAM
        txSig256qam = randi([0 255], spf, 1);
        mod256qamSig = qammod(txSig256qam, 256, 'UnitAveragePower', true);
        tdl256qamSig = tdl(mod256qamSig);
        awgn256qamSig = awgn(tdl256qamSig, snr(snrIdx));
        totalSig256qam(:, :, frameIdx) = awgn256qamSig;
    end

%% 데이터셋 생성 및 분할
    % 실수, 복소수 분리
    dataQpsk(:,1,:) = real(totalSigQpsk);
    dataQpsk(:,2,:) = imag(totalSigQpsk);

    data16qam(:,1,:) = real(totalSig16qam);
    data16qam(:,2,:) = imag(totalSig16qam);

    data64qam(:,1,:) = real(totalSig64qam);
    data64qam(:,2,:) = imag(totalSig64qam);

    data256qam(:,1,:) = real(totalSig256qam);
    data256qam(:,2,:) = imag(totalSig256qam);

    % 전체 훈련 데이터셋
    trainingData(:,:,1:numFrame*trainDataRatio) = dataQpsk(:,:,1:numFrame*trainDataRatio);
    trainingData(:,:,numFrame*trainDataRatio+1:numFrame*trainDataRatio*2) = data16qam(:,:,1:numFrame*trainDataRatio);
    trainingData(:,:,numFrame*trainDataRatio*2+1:numFrame*trainDataRatio*3) = data64qam(:,:,1:numFrame*trainDataRatio);
    trainingData(:,:,numFrame*trainDataRatio*3+1:numFrame*trainDataRatio*4) = data256qam(:,:,1:numFrame*trainDataRatio);
    
    validationData(:,:,1:numFrame*validDataRatio) = dataQpsk(:,:,1+numFrame*trainDataRatio:numFrame);
    validationData(:,:,numFrame*validDataRatio+1:numFrame*validDataRatio*2) = data16qam(:,:,1+numFrame*trainDataRatio:numFrame);
    validationData(:,:,numFrame*validDataRatio*2+1:numFrame*validDataRatio*3) = data64qam(:,:,1+numFrame*trainDataRatio:numFrame);
    validationData(:,:,numFrame*validDataRatio*3+1:numFrame*validDataRatio*4) = data256qam(:,:,1+numFrame*trainDataRatio:numFrame);

    % 훈련 데이터셋 라벨링
    for n = 1:numFrame* trainDataRatio * numModTypes 
        rxTrainFrames(1,:,:,n) = trainingData(:,:,n);
        if n <=numFrame* trainDataRatio
            rxTrainLabels(n) = modTypes(1);
        elseif n<=numFrame* trainDataRatio *2
            rxTrainLabels(n) = modTypes(2);
        elseif n<=numFrame* trainDataRatio *3
            rxTrainLabels(n) = modTypes(3);
        elseif n<=numFrame* trainDataRatio *4
            rxTrainLabels(n) = modTypes(4);
        end
    end
    
    % 검증 데이터셋 라벨링
    for n = 1:numFrame* validDataRatio * numModTypes 
        rxValidFrames(1,:,:,n) = validationData(:,:,n);
        if n <=numFrame* validDataRatio
            rxValidLabels(n) = modTypes(1);
        elseif n<=numFrame* validDataRatio *2
            rxValidLabels(n) = modTypes(2);
        elseif n<=numFrame* validDataRatio *3
            rxValidLabels(n) = modTypes(3);
        elseif n<=numFrame* validDataRatio *4
            rxValidLabels(n) = modTypes(4);
        end
    end

%% 레이어 설정 및 학습
    testPred = rxTestLabels;

    trainedNet      = importONNXNetwork(snr(snrIdx) + "dB_AMC_network.onnx");
    rxTestPred      = classify(trainedNet,rxTestFrames);
    rxTestPred      = rxTestPred.';

end